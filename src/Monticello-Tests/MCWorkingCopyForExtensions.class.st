Class {
	#name : #MCWorkingCopyForExtensions,
	#superclass : #MCTestCase,
	#category : #'Monticello-Tests-Base'
}

{ #category : #tests }
MCWorkingCopyForExtensions >> tearDown [
	super tearDown.
	'ATestPackage' asPackage removeFromSystem.
	'AnotherTestPackage' asPackage removeFromSystem.
	
	Object
		compiledMethodAt: #testingMethod
		ifPresent: [ Object removeSelector: #testingMethod ]
		ifAbsent: [  ].

	('Atestpackage-something-else' asPackageIfAbsent: [ nil ]) ifNotNil: #removeFromSystem.

	MCWorkingCopy registry
		at: (MCPackage named: 'atestpackage-something-else')
		ifPresent: [ :aWC | aWC unload ]
]

{ #category : #tests }
MCWorkingCopyForExtensions >> testAddingExtensionMethodNotMatchingPackage [

	| aClass |
	RPackageOrganizer default createPackageNamed: 'ATestPackage'.
	RPackageOrganizer default createPackageNamed: 'AnotherTestPackage'.

	aClass := Object subclass: #ATestClass  
		instanceVariableNames:''
		classVariableNames: ''
		package: 'AnotherTestPackage'.  

	aClass compile: 'testingMethod ^ 42 ' classified: '*atestpackage-something-else'.
	
	self deny: (RPackageOrganizer default includesPackageNamed: 'Atestpackage-something-else').
	self assert: ('ATestPackage' asPackage extendedClasses includes: aClass).

	MCWorkingCopy registry at: (MCPackage named: 'atestpackage-something-else') ifPresent: [ self fail ].	
]
