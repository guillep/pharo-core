"
CharacterSetComplement is a space efficient implementation of (CharacterSet complement) taking care of WideCharacter (code > 255)

However, it will maintain a byteArrayMap for character <= 255 in a cache keeping 

instance variables:
	absent <CharacterSet> contains character that are not in the set (i.e. my complement)
	byteArrayMapCache <ByteArray | nil> cache this information because it has to be used in tight loops where efficiency matters
"
Class {
	#name : #CharacterSetComplement,
	#superclass : #Collection,
	#instVars : [
		'absent',
		'byteArrayMapCache'
	],
	#category : #'Collections-Support'
}

{ #category : #'instance creation' }
CharacterSetComplement class >> of: aCharacterSet [
	"answer the complement of aCharacterSet"
	
	^ super new complement: aCharacterSet
]

{ #category : #comparing }
CharacterSetComplement >> = anObject [
	"Implementation note: we do not test if equal to a WideCharacterSet,
	because it is unlikely that WideCharacterSet is as complete as self"
	
	^self class == anObject class and: [
		absent = anObject complement ]
]

{ #category : #'collection ops' }
CharacterSetComplement >> abstractSize [
	"an abstraction of my size, to be used in implementing union & intersection"
		
	^self large
]

{ #category : #'collection ops' }
CharacterSetComplement >> add: aCharacter [ 
	"a character is present if not absent, so adding a character is removing it from the absent"
	
	(absent includes: aCharacter)
		ifTrue:
			[byteArrayMapCache := nil.
			absent remove: aCharacter].
	^ aCharacter
]

{ #category : #private }
CharacterSetComplement >> byteArrayMap [
	"return a ByteArray mapping each ascii value to a 1 if that ascii value is in the set, and a 0 if it isn't.  Intended for use by primitives only"

	^byteArrayMapCache ifNil: [byteArrayMapCache := absent byteArrayMap collect: [:i | 1 - i]]
]

{ #category : #converting }
CharacterSetComplement >> complement [
	"return a character set containing precisely the characters the receiver does not"
	
	^absent copy
]

{ #category : #initialization }
CharacterSetComplement >> complement: aCharacterSet [
	"initialize with the complement"
	
	byteArrayMapCache := nil.
	absent := aCharacterSet.
	
]

{ #category : #'collection ops' }
CharacterSetComplement >> do: aBlock [
	"evaluate aBlock with each character in the set.
	don't do it, there are too many..."

	self shouldNotImplement
]

{ #category : #'collection ops' }
CharacterSetComplement >> findFirstInByteString: aByteString startingAt: startIndex [
	"Double dispatching: since we know this is a ByteString, we can use a superfast primitive using a ByteArray map with 0 slots for byte characters not included and 1 for byte characters included in the receiver."
	^ByteString
		findFirstInString: aByteString
		inSet: self byteArrayMap
		startingAt: startIndex
]

{ #category : #testing }
CharacterSetComplement >> hasWideCharacters [
	"This is a guess that absent is not holding each and every possible wideCharacter..."
	
	^true
]

{ #category : #comparing }
CharacterSetComplement >> hash [
	^absent hash bitXor: self class hash
]

{ #category : #'collection ops' }
CharacterSetComplement >> includes: aCharacter [
	^(absent includes: aCharacter) not
]

{ #category : #enumerating }
CharacterSetComplement >> intersection: anotherSet [
	"if anotherSet is small, let it take care of the operation. 
	Otherwise, invoke de Morgan's law."
	anotherSet abstractSize < self abstractSize
		ifTrue: [ ^ anotherSet intersectSmallWithLarge: self ].
	^ self class of: (self complement union: anotherSet complement)
]

{ #category : #copying }
CharacterSetComplement >> postCopy [
	super postCopy.
	absent := absent copy
]

{ #category : #printing }
CharacterSetComplement >> printOn: aStream [
	"Print a description of the complement rather than self.
	Rationale: self would be too long to print."
	
	aStream nextPut: $(.
	absent printOn: aStream.
	aStream nextPut: $); space; nextPutAll: #complement.
]

{ #category : #'collection ops' }
CharacterSetComplement >> reject: aBlock [
	"Implementation note: rejecting present is selecting absent"
	
	^(absent select: aBlock) complement
]

{ #category : #'collection ops' }
CharacterSetComplement >> remove: aCharacter [
	"This means aCharacter is now absent from myself.
	It must be added to my absent."
	
	byteArrayMapCache := nil.
	^absent add: aCharacter
]

{ #category : #'collection ops' }
CharacterSetComplement >> remove: aCharacter ifAbsent: aBlock [
	(self includes: aCharacter) ifFalse: [^aBlock value].
	^self remove: aCharacter
]

{ #category : #'collection ops' }
CharacterSetComplement >> removeAll [
	self becomeForward: CharacterSet new
]

{ #category : #'collection ops' }
CharacterSetComplement >> select: aBlock [
	"Implementation note: selecting present is rejecting absent"
	
	^(absent reject: aBlock) complement
]

{ #category : #'collection ops' }
CharacterSetComplement >> size [
	"Is this 2**32-absent size ?"
	
	^self shouldNotImplement
]

{ #category : #printing }
CharacterSetComplement >> storeOn: aStream [
	"Store a description of the elements of the complement rather than self."
	
	aStream nextPut: $(.
	absent storeOn: aStream.
	aStream nextPut: $); space; nextPutAll: #complement.
]
